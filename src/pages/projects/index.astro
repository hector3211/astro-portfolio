---
import Layout from "../../layouts/Layout.astro";
import { Image } from "@astrojs/image/components";
import RustFlixImage from "../../../public/rustflix.png";
import TravelImage from "../../../public/travel.png";
import Footer from "../../components/Footer.astro";
---

<Layout title="welcome to astro projects">
    <div class="container mx-auto">
        <h1
            class="lg:py-7 pb-5 text-3xl lg:text-4xl text-center font-bold underline underline-offset-4"
        >
            Deployed Apps
        </h1>
        <div class="flex flex-col justify-evenly md:flex-row">
            <div
                class="card card-compact border border-gray-500 w-80 bg-base-100 shadow-xl"
            >
                <figure>
                    <Image
                        width={600}
                        height={400}
                        aspectRatio={16 / 9}
                        src={RustFlixImage}
                        alt="rustflix"
                    />
                </figure>
                <div class="card-body">
                    <h2 class="card-title">RustFlix</h2>
                    <p class="lg:text-lg">
                        Rustflix is a modern video streaming web app using
                        Next.js 13 server components for fast frontend
                        rendering. Its backend is built on Rust Actix framework
                        with Diesel ORM for efficient data manipulation and
                        efficient performance, it provides seamless video
                        streaming experience.
                    </p>
                    <div class="card-actions justify-end">
                        <button class="btn btn-primary">
                            <a
                                href="https://rust-fullstack.vercel.app/"
                                target="_blank">Visite</a
                            >
                        </button>
                    </div>
                </div>
            </div>
            <div
                class="mt-5 md:mt-0 card card-compact border border-gray-500 w-80 bg-base-100 shadow-xl"
            >
                <figure>
                    <Image
                        width={600}
                        height={400}
                        aspectRatio={16 / 9}
                        src={TravelImage}
                        alt="travel"
                    />
                </figure>
                <div class="card-body">
                    <h2 class="card-title">Travel</h2>
                    <p class="lg:text-lg">
                        This travel app built with Next.js offers real-time
                        weather updates and the latest website design trends.
                        The app uses modern design techniques such as responsive
                        design and animations to create an engaging user
                        experience. The app is fast and efficient.
                    </p>
                    <div class="card-actions justify-end">
                        <button class="btn btn-primary">
                            <a
                                href="https://travel-hector3211.vercel.app/"
                                target="_blank">Visite</a
                            >
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <h1
            class="py-5 lg:py-7 mt-5 text-3xl lg:text-4xl text-center font-bold underline underline-offset-4"
        >
            Undeployed Apps
        </h1>

        <div class="container flex flex-col justify-between px-5 mx-auto">
            <div
                class="collapse collapse-plus border border-base-300 bg-base-100 rounded-box"
            >
                <input type="checkbox" />
                <div class="collapse-title text-xl font-medium">
                    <h2 class="text-xl">Rust Axum/Diesel Api</h2>
                </div>
                <div class="collapse-content flex flex-col items-center">
                    <p class="lg:text-lg py-3">
                        This Rust Axum API project utilizes Diesel queries to
                        make changes and fetch data from a database containing
                        tables for users and todos. The queries are executed
                        within a Tokio spawn block async function, allowing for
                        concurrent execution and efficient I/O operations. This
                        allows for increased performance and scalability when
                        handling large numbers of requests and updates to the
                        database.
                    </p>
                    <button class="btn btn-primary w-full">
                        <a
                            href="https://github.com/hector3211/axum-server"
                            target="_blank">Visite</a
                        >
                    </button>
                </div>
            </div>
        </div>

        <div class="container flex flex-col justify-between px-5 mx-auto">
            <div
                class="collapse collapse-plus border border-base-300 bg-base-100 rounded-box"
            >
                <input type="checkbox" />
                <div class="collapse-title text-xl font-medium">
                    <h2 class="text-xl">RustFlix Actix/Diesel Api</h2>
                </div>
                <div class="collapse-content flex flex-col items-center">
                    <p class="lg:text-lg py-3">
                        This Rust Actix API project uses Diesel queries to
                        perform CRUD operations on a database containing movie
                        data. The queries are executed within Actix web blocks,
                        which provide a convenient and ergonomic way to work
                        with Diesel's async API. This enables efficient and
                        non-blocking I/O operations, making it possible to
                        handle a large number of requests and updates to the
                        database.
                    </p>
                    <button class="btn btn-primary w-full">
                        <a
                            href="https://github.com/hector3211/rust-fullstack/tree/main/server"
                            target="_blank">Visite</a
                        >
                    </button>
                </div>
            </div>
        </div>

        <div class="container flex flex-col justify-between px-5 mx-auto">
            <div
                class="collapse collapse-plus border border-base-300 bg-base-100 rounded-box"
            >
                <input type="checkbox" />
                <div class="collapse-title text-xl font-medium">
                    <h2 class="text-xl">Rust TypeTester</h2>
                </div>
                <div class="collapse-content flex flex-col items-center">
                    <p class="lg:text-lg py-3">
                        This Rust-based project is a keyboard typing test, which
                        allows users to test their typing speed and accuracy.
                        The program prompts the user to type a given set of
                        words or phrases as quickly and accurately as possible,
                        and records the time taken and errors made.This project
                        is designed to be simple and easy to use, making it
                        ideal for individuals who want to improve their typing
                        skills.
                    </p>
                    <button class="btn btn-primary w-full">
                        <a
                            href="https://github.com/hector3211/rust_typetester"
                            target="_blank">Visite</a
                        >
                    </button>
                </div>
            </div>
        </div>

        <div class="container flex flex-col justify-between px-5 mx-auto">
            <div
                class="collapse collapse-plus border border-base-300 bg-base-100 rounded-box"
            >
                <input type="checkbox" />
                <div class="collapse-title text-xl font-medium">
                    <h2 class="text-xl">Rust Clap DataLogger</h2>
                </div>
                <div class="collapse-content flex flex-col items-center">
                    <p class="lg:text-lg py-3">
                        This Rust-based project uses the Clap library for
                        command-line argument parsing and Diesel for data
                        management, specifically data logging. The program is
                        designed to take in information about a job, including
                        its name, invoice number, salesperson, and payment
                        status, through command-line arguments. The information
                        is then saved to a database using Diesel's ORM
                        functionality. This project is ideal for small
                        businesses or individuals who need a simple and
                        efficient way to track job information and payment
                        status
                    </p>
                    <button class="btn btn-primary w-full">
                        <a
                            href="https://github.com/hector3211/rust_introduction/tree/main/clap_intro"
                            target="_blank">Visite</a
                        >
                    </button>
                </div>
            </div>
        </div>

        <div class="divider w-1/2 mx-auto"></div>

        <div class="container flex flex-col justify-between px-5 mx-auto">
            <div
                class="collapse collapse-plus border border-base-300 bg-base-100 rounded-box"
            >
                <input type="checkbox" />
                <div class="collapse-title text-xl font-medium">
                    <h2 class="text-xl">Golang Fiber</h2>
                </div>
                <div class="collapse-content flex flex-col items-center">
                    <p class="lg:text-lg py-3">
                        I'm excited to tell you about an app I built using
                        Golang's Fiber framework to retrieve and serve data from
                        the Pokemon API. With the help of Golang's built-in HTTP
                        client, I was able to easily fetch data and set up
                        routes to serve it back to users. Giving users access to
                        a wealth of Pokemon data. Giving reliable access to
                        information about users' favorite Pokemon
                    </p>
                    <button class="btn btn-primary w-full">
                        <a
                            href="https://github.com/hector3211/golang_intro/tree/main/fiber"
                            target="_blank">Visite</a
                        >
                    </button>
                </div>
            </div>
        </div>

        <div class="container flex flex-col justify-between mb-10 px-5 mx-auto">
            <div
                class="collapse collapse-plus border border-base-300 bg-base-100 rounded-box"
            >
                <input type="checkbox" />
                <div class="collapse-title text-xl font-medium">
                    <h2 class="text-xl">Golang Gorm Postgres</h2>
                </div>
                <div class="collapse-content flex flex-col items-center">
                    <p class="lg:text-lg py-3">
                        building a Golang Fiber and Gorm app that uses a
                        Postgres database to serve up videos. I used Gorm to
                        connect to the database and set up a video table, and
                        then defined API routes with the Fiber framework. I used
                        Gorm's querying capabilities to filter, sort, and
                        paginate the video data to ensure a smooth and organized
                        experience for the user. With Golang's efficient and
                        powerful features, I'm confident in the app's ability to
                        handle large amounts of data and deliver it quickly to
                        users.
                    </p>
                    <button class="btn btn-primary w-full">
                        <a
                            href="https://github.com/hector3211/golang_intro/tree/main/go_postgres"
                            target="_blank">Visite</a
                        >
                    </button>
                </div>
            </div>
        </div>
        <Footer />
    </div>
</Layout>
